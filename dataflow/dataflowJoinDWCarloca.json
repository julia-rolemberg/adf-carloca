{
	"name": "dataflowJoinDWCarloca",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Loc_Cliente",
						"type": "DatasetReference"
					},
					"name": "loccliente"
				},
				{
					"dataset": {
						"referenceName": "Loc_tp_cliente",
						"type": "DatasetReference"
					},
					"name": "loctpcliente"
				},
				{
					"dataset": {
						"referenceName": "loc_banco",
						"type": "DatasetReference"
					},
					"name": "locbanco"
				},
				{
					"dataset": {
						"referenceName": "loc_AGE_BCO",
						"type": "DatasetReference"
					},
					"name": "locAGEBCO"
				},
				{
					"dataset": {
						"referenceName": "Loc_funcionario",
						"type": "DatasetReference"
					},
					"name": "locfuncionario"
				},
				{
					"dataset": {
						"referenceName": "Loc_depto",
						"type": "DatasetReference"
					},
					"name": "locdepto"
				},
				{
					"dataset": {
						"referenceName": "Loc_cargo",
						"type": "DatasetReference"
					},
					"name": "loccargo"
				},
				{
					"dataset": {
						"referenceName": "Loc_gerente",
						"type": "DatasetReference"
					},
					"name": "locgerente"
				},
				{
					"dataset": {
						"referenceName": "Loc_agencia",
						"type": "DatasetReference"
					},
					"name": "locagencia"
				},
				{
					"dataset": {
						"referenceName": "Loc_cidade",
						"type": "DatasetReference"
					},
					"name": "loccidade"
				},
				{
					"dataset": {
						"referenceName": "Loc_estado",
						"type": "DatasetReference"
					},
					"name": "locestado"
				},
				{
					"dataset": {
						"referenceName": "Loc_tp_automovel",
						"type": "DatasetReference"
					},
					"name": "locTpAutomovel"
				},
				{
					"dataset": {
						"referenceName": "Loc_tp_combustivel",
						"type": "DatasetReference"
					},
					"name": "loctpcombustivel"
				},
				{
					"dataset": {
						"referenceName": "Loc_cor",
						"type": "DatasetReference"
					},
					"name": "loccor"
				},
				{
					"dataset": {
						"referenceName": "Loc_proprietario",
						"type": "DatasetReference"
					},
					"name": "locproprietario"
				},
				{
					"dataset": {
						"referenceName": "Loc_modelo",
						"type": "DatasetReference"
					},
					"name": "locmodelo"
				},
				{
					"dataset": {
						"referenceName": "Loc_fabricante",
						"type": "DatasetReference"
					},
					"name": "locfabricante"
				},
				{
					"dataset": {
						"referenceName": "Loc_grupo",
						"type": "DatasetReference"
					},
					"name": "locgrupo"
				},
				{
					"dataset": {
						"referenceName": "Loc_veiculo",
						"type": "DatasetReference"
					},
					"name": "locveiculo"
				},
				{
					"dataset": {
						"referenceName": "locitemlocacao",
						"type": "DatasetReference"
					},
					"name": "locitemlocacao"
				},
				{
					"dataset": {
						"referenceName": "locpedidolocacao",
						"type": "DatasetReference"
					},
					"name": "locpedidolocacao"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silverDimCliente",
						"type": "DatasetReference"
					},
					"name": "sinkSilver"
				},
				{
					"dataset": {
						"referenceName": "silverDimBanco",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "silverDimFuncionario",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "silverDimVeiculo",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "locbancoagebco"
				},
				{
					"name": "joinfuncdepto"
				},
				{
					"name": "funccargo"
				},
				{
					"name": "funcgerente"
				},
				{
					"name": "bancoagencia"
				},
				{
					"name": "cidadeestado"
				},
				{
					"name": "agenciacidade"
				},
				{
					"name": "modelofabricante"
				},
				{
					"name": "veiculomodelofabricante"
				},
				{
					"name": "veiculoTpAuto"
				},
				{
					"name": "veiculoTpCombustivel"
				},
				{
					"name": "veiculogrupo"
				},
				{
					"name": "veiculoproprietario"
				},
				{
					"name": "veiculocor"
				},
				{
					"name": "veiculoitem"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Cd_cliente as integer,",
				"          Nm_Cliente as string,",
				"          Cd_Tp_Cliente as integer,",
				"          Nr_Estrelas as integer,",
				"          Nr_Habilitacao as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loccliente",
				"source(output(",
				"          cd_Tp_Cliente as integer,",
				"          Nm_Tp_Cliente as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loctpcliente",
				"source(output(",
				"          cd_Banco as integer,",
				"          Nm_Banco as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locbanco",
				"source(output(",
				"          cd_agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_banco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locAGEBCO",
				"source(output(",
				"          Cd_Func as integer,",
				"          Nm_Func as string,",
				"          Dt_Inicio as timestamp,",
				"          Cd_Gerente as integer,",
				"          Nr_CPF as integer,",
				"          Vl_Salario as decimal(38,18),",
				"          Vl_Perc_Comissao as decimal(38,18),",
				"          Cd_Depto as integer,",
				"          Cd_Cargo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locfuncionario",
				"source(output(",
				"          Cd_Depto as integer,",
				"          Nm_Depto as string,",
				"          Vl_Orc_Depto as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locdepto",
				"source(output(",
				"          Cd_Cargo as integer,",
				"          Nm_Cargo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loccargo",
				"source(output(",
				"          Cd_Func as integer,",
				"          Nm_Func as string,",
				"          Dt_Inicio as timestamp,",
				"          Cd_Gerente as integer,",
				"          Nr_CPF as integer,",
				"          Vl_Salario as decimal(38,18),",
				"          Vl_Perc_Comissao as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locgerente",
				"source(output(",
				"          cd_Agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_Cidade as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locagencia",
				"source(output(",
				"          Cd_Cidade as integer,",
				"          Nm_Cidade as string,",
				"          Cd_Estado as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loccidade",
				"source(output(",
				"          Cd_Estado as integer,",
				"          Nm_Estado as string,",
				"          Sigla_Estado as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locestado",
				"source(output(",
				"          cd_Tp_Automovel as integer,",
				"          Nm_Tp_Automovel as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locTpAutomovel",
				"source(output(",
				"          cd_Tp_Combustivel as integer,",
				"          Nm_Tp_Combustivelcol as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loctpcombustivel",
				"source(output(",
				"          cd_Cor as integer,",
				"          Desc_Cor as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> loccor",
				"source(output(",
				"          cd_proprietario as integer,",
				"          Nm_Proprietario as string,",
				"          Nr_CPF as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locproprietario",
				"source(output(",
				"          cd_Modelo as integer,",
				"          Nm_Modelo as string,",
				"          cd_Fabricante as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locmodelo",
				"source(output(",
				"          cd_Fabricante as integer,",
				"          Nm_Fabricante as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locfabricante",
				"source(output(",
				"          cd_Grupo as integer,",
				"          Nm_Grupo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locgrupo",
				"source(output(",
				"          Nr_Placa as string,",
				"          Cd_Proprietario as integer,",
				"          Nr_Chassis as string,",
				"          Status as string,",
				"          Km_Atual as integer,",
				"          Tp_Automovel as integer,",
				"          Tp_Combustivel as integer,",
				"          cd_Modelo as integer,",
				"          cd_cor as integer,",
				"          cd_grupo as integer,",
				"          Vl_Diaria as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locveiculo",
				"source(output(",
				"          Nr_Pedido as integer,",
				"          Nr_Placa as string,",
				"          Vl_Diaria as decimal(38,18),",
				"          Vl_Diaria_Calc as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locitemlocacao",
				"source(output(",
				"          Nr_Pedido as integer,",
				"          Dt_Locacao as timestamp,",
				"          Cd_Cliente as integer,",
				"          Cd_Agencia as integer,",
				"          Qt_Dias as integer,",
				"          Vl_Total as decimal(38,18),",
				"          Status as string,",
				"          Dt_Retirada as timestamp,",
				"          Dt_Entrega as timestamp,",
				"          Cd_Func as integer,",
				"          Dt_Pagto as timestamp,",
				"          Cd_Age_Bco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> locpedidolocacao",
				"loccliente, loctpcliente join(loccliente@Cd_Tp_Cliente == loctpcliente@cd_Tp_Cliente,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"locbanco, locAGEBCO join(locbanco@cd_Banco == locAGEBCO@cd_banco,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> locbancoagebco",
				"funccargo, locdepto join(locfuncionario@Cd_Depto == locdepto@Cd_Depto,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinfuncdepto",
				"funcgerente, loccargo join(locfuncionario@Cd_Cargo == loccargo@Cd_Cargo,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> funccargo",
				"locfuncionario, locgerente join(locfuncionario@Cd_Func == locgerente@Cd_Func,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> funcgerente",
				"locbancoagebco, locagencia join(locAGEBCO@cd_agencia == locagencia@cd_Agencia,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> bancoagencia",
				"loccidade, locestado join(loccidade@Cd_Estado == locestado@Cd_Estado,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> cidadeestado",
				"bancoagencia, cidadeestado join(locagencia@cd_Cidade == loccidade@Cd_Cidade,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> agenciacidade",
				"locfabricante, locmodelo join(locfabricante@cd_Fabricante == locmodelo@cd_Fabricante,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> modelofabricante",
				"locveiculo, modelofabricante join(locveiculo@cd_Modelo == locmodelo@cd_Modelo,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculomodelofabricante",
				"veiculomodelofabricante, locTpAutomovel join(Tp_Automovel == cd_Tp_Automovel,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculoTpAuto",
				"veiculoTpAuto, loctpcombustivel join(Tp_Combustivel == cd_Tp_Combustivel,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculoTpCombustivel",
				"veiculoTpCombustivel, locgrupo join(locveiculo@cd_grupo == locgrupo@cd_Grupo,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculogrupo",
				"veiculogrupo, locproprietario join(locveiculo@Cd_Proprietario == locproprietario@cd_proprietario,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculoproprietario",
				"veiculoproprietario, loccor join(locveiculo@cd_cor == loccor@cd_Cor,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculocor",
				"veiculocor, locitemlocacao join(locveiculo@Nr_Placa == locitemlocacao@Nr_Placa,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> veiculoitem",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Cd_cliente as integer,",
				"          Nm_Cliente as string,",
				"          Cd_Tp_Cliente as integer,",
				"          Nr_Estrelas as integer,",
				"          Nr_Habilitacao as integer,",
				"          cd_Tp_Cliente as integer,",
				"          Nm_Tp_Cliente as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkSilver",
				"agenciacidade sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cd_Banco as integer,",
				"          Nm_Banco as string,",
				"          url as string,",
				"          cd_agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_banco as integer,",
				"          cd_Agencia as integer,",
				"          cd_Cidade as integer,",
				"          Cd_Cidade as integer,",
				"          Nm_Cidade as string,",
				"          Cd_Estado as integer,",
				"          Nm_Estado as string,",
				"          Sigla_Estado as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"joinfuncdepto sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Cd_Func as integer,",
				"          Nm_Func as string,",
				"          Dt_Inicio as timestamp,",
				"          Cd_Gerente as integer,",
				"          Nr_CPF as integer,",
				"          Vl_Salario as decimal(38,18),",
				"          Vl_Perc_Comissao as decimal(38,18),",
				"          Cd_Depto as integer,",
				"          Cd_Cargo as integer,",
				"          Nm_Cargo as string,",
				"          Nm_Depto as string,",
				"          Vl_Orc_Depto as decimal(38,18)",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"veiculoitem sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Nr_Placa as string,",
				"          Cd_Proprietario as integer,",
				"          Nr_Chassis as string,",
				"          Status as string,",
				"          Km_Atual as integer,",
				"          Tp_Automovel as integer,",
				"          Tp_Combustivel as integer,",
				"          cd_Modelo as integer,",
				"          cd_cor as integer,",
				"          cd_grupo as integer,",
				"          Vl_Diaria as decimal(38,18),",
				"          cd_Fabricante as integer,",
				"          Nm_Fabricante as string,",
				"          Nm_Modelo as string,",
				"          cd_Tp_Automovel as integer,",
				"          Nm_Tp_Automovel as string,",
				"          cd_Tp_Combustivel as integer,",
				"          Nm_Tp_Combustivelcol as string,",
				"          cd_Grupo as integer,",
				"          Nm_Grupo as string,",
				"          cd_proprietario as integer,",
				"          Nm_Proprietario as string,",
				"          Nr_CPF as integer,",
				"          cd_Cor as integer,",
				"          Desc_Cor as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}