{
	"name": "dataflowGold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "silverDimCliente",
						"type": "DatasetReference"
					},
					"name": "dimCliente"
				},
				{
					"dataset": {
						"referenceName": "silverDimFuncionario",
						"type": "DatasetReference"
					},
					"name": "dimFuncionario"
				},
				{
					"dataset": {
						"referenceName": "silverDimBanco",
						"type": "DatasetReference"
					},
					"name": "dimBanco"
				},
				{
					"dataset": {
						"referenceName": "silverDimVeiculo",
						"type": "DatasetReference"
					},
					"name": "dimVeiculo"
				},
				{
					"dataset": {
						"referenceName": "silverFtLocacao",
						"type": "DatasetReference"
					},
					"name": "ftLocacao"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fatoLocacao",
						"type": "DatasetReference"
					},
					"name": "sinkFato"
				}
			],
			"transformations": [
				{
					"name": "loccliente"
				},
				{
					"name": "locfuncionario"
				},
				{
					"name": "locbanco"
				},
				{
					"name": "locveiculo"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Cd_cliente as integer,",
				"          Nm_Cliente as string,",
				"          Cd_Tp_Cliente as integer,",
				"          Nr_Estrelas as integer,",
				"          Nr_Habilitacao as integer,",
				"          cd_Tp_Cliente as integer,",
				"          Nm_Tp_Cliente as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dimCliente",
				"source(output(",
				"          Cd_Func as integer,",
				"          Nm_Func as string,",
				"          Dt_Inicio as timestamp,",
				"          Cd_Gerente as integer,",
				"          Nr_CPF as integer,",
				"          Vl_Salario as decimal(38,18),",
				"          Vl_Perc_Comissao as decimal(38,18),",
				"          Cd_Depto as integer,",
				"          Cd_Cargo as integer,",
				"          Nm_Cargo as string,",
				"          Nm_Depto as string,",
				"          Vl_Orc_Depto as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dimFuncionario",
				"source(output(",
				"          cd_Banco as integer,",
				"          Nm_Banco as string,",
				"          url as string,",
				"          cd_agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_banco as integer,",
				"          cd_Agencia as integer,",
				"          cd_Cidade as integer,",
				"          Cd_Cidade as integer,",
				"          Nm_Cidade as string,",
				"          Cd_Estado as integer,",
				"          Nm_Estado as string,",
				"          Sigla_Estado as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dimBanco",
				"source(output(",
				"          Nr_Placa as string,",
				"          Cd_Proprietario as integer,",
				"          Nr_Chassis as string,",
				"          Status as string,",
				"          Km_Atual as integer,",
				"          Tp_Automovel as integer,",
				"          Tp_Combustivel as integer,",
				"          cd_Modelo as integer,",
				"          cd_cor as integer,",
				"          cd_grupo as integer,",
				"          Vl_Diaria as decimal(38,18),",
				"          cd_Fabricante as integer,",
				"          Nm_Fabricante as string,",
				"          Nm_Modelo as string,",
				"          cd_Tp_Automovel as integer,",
				"          Nm_Tp_Automovel as string,",
				"          cd_Tp_Combustivel as integer,",
				"          Nm_Tp_Combustivelcol as string,",
				"          cd_Grupo as integer,",
				"          Nm_Grupo as string,",
				"          cd_proprietario as integer,",
				"          Nm_Proprietario as string,",
				"          Nr_CPF as integer,",
				"          cd_Cor as integer,",
				"          Desc_Cor as string,",
				"          Nr_Pedido as integer,",
				"          Vl_Diaria_Calc as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dimVeiculo",
				"source(output(",
				"          Nr_Pedido as integer,",
				"          Dt_Locacao as timestamp,",
				"          Cd_Cliente as integer,",
				"          Cd_Agencia as integer,",
				"          Qt_Dias as integer,",
				"          Vl_Total as decimal(38,18),",
				"          Status as string,",
				"          Dt_Retirada as timestamp,",
				"          Dt_Entrega as timestamp,",
				"          Cd_Func as integer,",
				"          Dt_Pagto as timestamp,",
				"          Cd_Age_Bco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ftLocacao",
				"ftLocacao, dimCliente join(ftLocacao@Cd_Cliente == dimCliente@Cd_cliente,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> loccliente",
				"loccliente, dimFuncionario join(ftLocacao@Cd_Func == dimFuncionario@Cd_Func,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> locfuncionario",
				"locfuncionario, dimBanco join(ftLocacao@Cd_Agencia == dimBanco@cd_agencia,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> locbanco",
				"locbanco, dimVeiculo join(ftLocacao@Nr_Pedido == dimVeiculo@Nr_Pedido,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> locveiculo",
				"locveiculo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkFato"
			]
		}
	}
}